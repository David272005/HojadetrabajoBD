package com.umg.dao;

import java.sql.SQLException;
import java.util.Scanner;
import java.sql.Connection;

import java.sql.PreparedStatement;

import java.sql.ResultSet;

import com.umg.connection.MariaDBConnecction;

public class TestDao {
	
	public static boolean estudiante( String primernombre, String primerapellido, String genero, String fecha_nacimiento) {
		
        Connection conn = MariaDBConnecction.getConnection();

        if (conn != null) {

            try {

            	String consulta = "INSERT INTO estudiantes (primernombre, primerapellido, genero, fecha_nacimiento ) VALUES (?, ?, ?, ?)";

                PreparedStatement statement = conn.prepareStatement(consulta);


                statement.setString(1, primernombre);
                statement.setString(2, primerapellido);
                statement.setString(3, genero);
                statement.setString(4, fecha_nacimiento);
                int filasInsertadas = statement.executeUpdate();
                System.out.println("Registro creado: " + filasInsertadas);
 
 
                statement.close();

                conn.close();

                return filasInsertadas > 0;

            } catch (SQLException e) {

                System.out.println("Error al crear cliente: " + e.getMessage());

                return false;

            }

        } else {

            System.out.println("No se pudo establecer la conexi贸n.");

            return false;

        }
	}
	 public static void leerEstudiantes() {
	        Connection conn = MariaDBConnecction.getConnection();
	        if (conn != null) {
	            try {
	                String consulta = "SELECT * FROM estudiantes";
	                PreparedStatement statement = conn.prepareStatement(consulta);
	                ResultSet resultSet = statement.executeQuery();
	                while (resultSet.next()) {
	                    int idEstudiante = resultSet.getInt("idestudiante");
	                    String primerNombre = resultSet.getString("primernombre");
	                    String primerApellido = resultSet.getString("primerapellido");
	                    String genero = resultSet.getString("genero");
	                    System.out.println("ID: " + idEstudiante+ ", Nombre: " + primerNombre + ", Apellido: " + primerApellido + ", Genero: " + genero);
	                }
	                resultSet.close();
	                statement.close();
	                conn.close();
	            } catch (SQLException e) {
	                System.out.println("Error al leer clientes: " + e.getMessage());
	            }
	        } else {
	            System.out.println("No se pudo establecer la conexi贸n.");
	        }
	    }
	 public static boolean actualizarEstudiante(String nombre, String apellido, String genero, int id) {

	        Connection conn = MariaDBConnecction.getConnection();

	        if (conn != null) {

	            try {

	                String consulta = "UPDATE estudiantes SET primernombre = ?, primerapellido = ?, genero = ? WHERE idestudiante = ?";

	                PreparedStatement statement = conn.prepareStatement(consulta);

	                statement.setString(1, nombre);

	                statement.setString(2, apellido);

	                statement.setString(3, genero);

	                statement.setInt(4, id);

	                int filasActualizadas = statement.executeUpdate();
	                System.out.println("Registro Actualizado, exitosamente");

	                statement.close();

	                conn.close();

	                return filasActualizadas > 0;

	            } catch (SQLException e) {

	                System.out.println("Error al actualizar cliente: " + e.getMessage());

	                return false;

	            }

	        } else {

	            System.out.println("No se pudo establecer la conexi贸n.");

	            return false;

	        }

	    }
	 public static boolean eliminarEstudiantes(int id) {

	        Connection conn = MariaDBConnecction.getConnection();

	        if (conn != null) {

	            try {

	                String consulta = "DELETE FROM estudiantes WHERE idestudiante = ?";

	                PreparedStatement statement = conn.prepareStatement(consulta);

	                statement.setInt(1, id);

	                int filasEliminadas = statement.executeUpdate();

	                statement.close();

	                conn.close();

	                return filasEliminadas > 0;

	            } catch (SQLException e) {

	                System.out.println("Error al eliminar estudiante: " + e.getMessage());

	                return false;

	            }

	        } else {

	            System.out.println("No se pudo establecer la conexi贸n.");

	            return false;

	        }

	    }

	}
	
